class Queue {
    private int maxSize; 
    private int[] queueArray; 
    private int front; 
    private int rear; 
    private int nItems; 

    public Queue(int size) {
        maxSize = size;
        queueArray = new int[maxSize];
        front = 0; 
        rear = -1; 
        nItems = 0; 
    }

    // Method to enqueue an element into the queue
    public void enqueue(int value) {
        if (isFull()) {
            System.out.println("Queue is full. Cannot enqueue " + value);
        } else {
            if (rear == maxSize - 1) {
                rear = -1; 
            }
            queueArray[++rear] = value;
            nItems++;
        }
    }

    // Method to dequeue an element from the queue
    public int dequeue() {
        if (isEmpty()) {
            System.out.println("Queue is empty. Cannot dequeue element");
            return -1; // or throw an exception
        } else {
            int temp = queueArray[front++];
            if (front == maxSize) {
                front = 0; // wrap around
            }
            nItems--;
            return temp;
        }
    }

    // Method to peek at the front element of the queue
    public int peek() {
        if (isEmpty()) {
            System.out.println("Queue is empty. Cannot peek element");
            return -1; // or throw an exception
        } else {
            return queueArray[front];
        }
    }

    // Method to check if the queue is empty
    public boolean isEmpty() {
        return (nItems == 0);
    }

    // Method to check if the queue is full
    public boolean isFull() {
        return (nItems == maxSize);
    }
}

// Main class to test the Queue
public class Main {
    public static void main(String[] args) {
        Queue queue = new Queue(2); // Create a queue of size 5

        // Enqueue elements into the queue
        queue.enqueue(990);
        queue.enqueue(20);
      

        // Try to enqueue another element to see the queue overflow message
        queue.enqueue(6);

        // Peek at the front element
        System.out.println("Peek element is: " + queue.peek());

        // Dequeue elements from the queue
        System.out.println("Dequeued element: " + queue.dequeue());
        System.out.println("Dequeued element: " + queue.dequeue());

        // Peek at the front element again
        System.out.println("Peek element is: " + queue.peek());

  

        // Try to dequeue another element to see the queue underflow message
        System.out.println("Dequeued element: " + queue.dequeue());
    }
}
