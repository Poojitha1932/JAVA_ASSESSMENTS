class Stack {
    private int maxSize; 
    private int[] stackArray;
    private int top; 

    public Stack(int size) {
        maxSize = size;
        stackArray = new int[maxSize];
        top = -1; // stack is initially empty
    }

    // Method to push an element onto the stack
    public void push(int value) {
        if (isFull()) {
            System.out.println("Stack is full. Cannot push " + value);
        } else {
            stackArray[++top] = value;
        }
    }
    // Method to pop an element from the stack
    public int pop() {
        if (isEmpty()) {
            System.out.println("Stack is empty. Cannot pop element");
            return -1; // or throw an exception
        } else {
            return stackArray[top--];
        }
    }
    // Method to peek at the top element of the stack
    public int peek() {
        if (isEmpty()) {
            System.out.println("Stack is empty. Cannot peek element");
            return -1; // or throw an exception
        } else {
            return stackArray[top];
        }
    }

    // Method to check if the stack is empty
    public boolean isEmpty() {
        return (top == -1);
    }

    // Method to check if the stack is full
    public boolean isFull() {
        return (top == maxSize - 1);
    }
}

// Main class to test the Stack
public class Main {
    public static void main(String[] args) {
        Stack stack = new Stack(2); // Create a stack of size 5

        // Push elements onto the stack
        stack.push(50);
        stack.push(999);
    
        // Peek at the top element
        System.out.println("Peek element is: " + stack.peek());

        // Pop elements from the stack
        System.out.println("Popped element: " + stack.pop());
        System.out.println("Popped element: " + stack.pop());

        // Try to pop another element to see the stack underflow message
        System.out.println("Popped element: " + stack.pop());
    }
}
